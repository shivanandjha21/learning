provider "kubernetes" {
  config_path = "~/.kube/config"
}

variable "namespace" {
  description = "The namespace of the daemonset"
  type        = string
  default     = "default"
}

variable "daemonset_name" {
  description = "The name of the daemonset to update"
  type        = string
  default     = "my-daemonset"
}

variable "cpu_requests" {
  description = "The CPU requests in millicores"
  type        = string
  default     = "200m"
}

variable "cpu_limits" {
  description = "The CPU limits in millicores"
  type        = string
  default     = "500m"
}

resource "kubernetes_daemonset" "example" {
  metadata {
    name      = var.daemonset_name
    namespace = var.namespace
  }

  spec {
    selector {
      match_labels = {
        app = var.daemonset_name
      }
    }

    template {
      metadata {
        labels = {
          app = var.daemonset_name
        }
      }

      spec {
        container {
          name  = var.daemonset_name
          image = "nginx:latest"

          resources {
            requests = {
              cpu = var.cpu_requests
            }

            limits = {
              cpu = var.cpu_limits
            }
          }
        }
      }
    }

    update_strategy {
      type = "RollingUpdate"
    }
  }
}



provider "aws" {
  region = "us-east-1" # Replace with your desired AWS region
}

# Security Group for RDS
resource "aws_security_group" "db_sg" {
  name        = "multi-az-postgres-cluster-sg"
  description = "Security group for Multi-AZ PostgreSQL DB cluster"

  ingress {
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Restrict this in production
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Subnet Group
resource "aws_db_subnet_group" "db_subnet_group" {
  name        = "multi-az-postgres-cluster-subnet-group"
  description = "Subnet group for Multi-AZ PostgreSQL DB cluster"
  subnet_ids  = ["subnet-xxxxxx", "subnet-yyyyyy"] # Replace with your subnet IDs
}

# Multi-AZ DB Cluster
resource "aws_rds_cluster" "pg_cluster" {
  cluster_identifier      = "multi-az-pg-cluster"
  engine                  = "postgres"
  engine_version          = "14.6" # Replace with the desired PostgreSQL version
  master_username         = "admin"
  master_password         = "adminpassword" # Secure this properly
  database_name           = "exampledb"
  storage_encrypted       = true
  kms_key_id              = "arn:aws:kms:us-east-1:123456789012:key/your-kms-key-id" # Optional
  backup_retention_period = 7
  preferred_backup_window = "02:00-03:00"
  db_subnet_group_name    = aws_db_subnet_group.db_subnet_group.name
  vpc_security_group_ids  = [aws_security_group.db_sg.id]
}

# Primary Instance
resource "aws_rds_cluster_instance" "primary_instance" {
  identifier              = "pg-cluster-primary"
  cluster_identifier      = aws_rds_cluster.pg_cluster.id
  instance_class          = "db.r6g.large" # Replace with your desired instance type
  engine                  = aws_rds_cluster.pg_cluster.engine

  publicly_accessible     = false
  availability_zone       = "us-east-1a" # Primary AZ
}

# Reader Instance
resource "aws_rds_cluster_instance" "reader_instance" {
  count                   = 2 # Create 2 reader instances for high availability
  identifier              = "pg-cluster-reader-${count.index + 1}"
  cluster_identifier      = aws_rds_cluster.pg_cluster.id
  instance_class          = "db.r6g.large"
  engine                  = aws_rds_cluster.pg_cluster.engine

  publicly_accessible     = false
  availability_zone       = element(["us-east-1b", "us-east-1c"], count.index) # Other AZs
}



  performance_insights_enabled = true
  performance_insights_kms_key_id = "arn:aws:kms:us-east-1:123456789012:key/your-kms-key-id" # Optional
  performance_insights_retention_period = 7 # Retain for 7 days (default)

BUILD_ARGS: --build-arg ARTIFACTORY_USERNAME=${{ secrets.ARTIFACTORY_USERNAME }} --build-arg ARTIFACTORY_PASSWORD=${{ secrets.ARTIFACTORY_PASSWORD }}
        password: ${{ secrets.SMTP_PASSWORD }}

- name: Debug workspace
  run: |
    pwd
    ls -R /workspace


#!/bin/bash

# Get the current git tag
CURRENT_TAG=$(git describe --tags --exact-match 2>/dev/null)

# Define the regular expression for the desired tag pattern
TAG_PATTERN="^rel-[0-9]+\.[0-9]+\.[0-9]+$"

# Check if the current tag matches the pattern
if [[ $CURRENT_TAG =~ $TAG_PATTERN ]]; then
    echo "Tag $CURRENT_TAG matches the pattern."
    export TAG_MATCHES=true
else
    echo "Tag $CURRENT_TAG does not match the pattern."
    export TAG_MATCHES=false
fi

# Export the variable for use in the Buildkite pipeline
echo "export TAG_MATCHES=$TAG_MATCHES" >> "$BUILDKITE_ENV_FILE"


fetch count("builtin:kubernetes.pod.count")
from entities
where entitySelector = "type(KUBERNETES_CLUSTER)"

type("KUBERNETES_POD"),managementZone("flshub")

type(CLOUD_APPLICATION_INSTANCE),toRelationships.isClusterOfCai(type(KUBERNETES_CLUSTER),entityName.in("<YOUR KUBERNETES CLUSTER NAME>"))
type(KUBERNETES_POD),kubernetes.cluster.name("flshub*")

kubectl get pods --all-namespaces -l app=prometheus
kubectl get deployments --all-namespaces -l app=prometheus
kubectl get statefulsets --all-namespaces -l app=prometheus
kubectl get services --all-namespaces -l app=prometheus
kubectl get crd | grep prometheus
helm list --all-namespaces | grep prometheus

prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
    metrics.dynatrace.com/scrape: 'true'
    metrics.dynatrace.com/path: '/metrics'
    metrics.dynatrace.com/port: '8080'
    metrics.dynatrace.com/secure: 'false'


heartbeat.monitors:
    - type: http
      id: my-secure-site
      name: My Secure Website
      urls: ["https://example.com"]
      schedule: '@every 10s'
      check.response.status: 200
      ssl.verification_mode: full
      ssl.certificate_authorities: ["/secrets/test-nsp/certificates/private/ca.pem"] # Path to CA certificate file
      ssl.certificate: "/secrets/test-nsp/certificates/private/cert.pem" # Path to client certificate file
      ssl.key: "/secrets/test-nsp/certificates/private/cert.key" # Path to client key file
      ssl.supported_protocols: ["TLSv1.2", "TLSv1.3"] # Supported SSL/TLS versions

builtin:kubernetes.pods:filter(eq("kubernetes.cluster.name", "<Your_Cluster_Name>"))

builtin:kubernetes.pods:filter(eq(dt.kubernetes.cluster.name,"<CLUSTER_NAME>")):splitBy(k8s.pod.name):count

builtin:containers.memory.usagePercent:splitBy("dt.entity.container_group_instance")


https://stackoverflow.com/questions/67057913/adding-count-to-terraform-module

https://github.com/hashicorp/terraform/issues/26809

builtin:kubernetes.container.restart:filter(and(ne(k8s.cluster.name,"<CLUSTER_NAME_TO_IGNORE>"))):splitBy(k8s.cluster.name):sum

builtin:kubernetes.container.restart:filter(and(or(ne(k8s.cluster.name,"prod-cluster"),ne(k8s.namespace.name,"test-namespace")))):splitBy(k8s.cluster.name,k8s.namespace.name):sum

curl -sSL "https://github.com/fullstorydev/grpcurl/releases/download/v1.8.7/grpcurl_1.8.7_linux_x86_64.tar.gz" | sudo tar -xz -C /usr/local/bin
curl -sSL "https://github.com/fullstorydev/grpcurl/releases/download/v1.8.6/grpcurl_1.8.6_linux_x86_64.tar.gz" | tar -xz -C /usr/local/bin
wget https://github.com/fullstorydev/grpcurl/releases/download/v1.7.0/grpcurl_1.7.0_linux_x86_64.tar.gz

tar -xvf grpcurl_1.7.0_linux_x86_64.tar.gz

chmod +x grpcurl

./grpcurl -help

apk update && apk add --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing grpcurl

wget https://github.com/fullstorydev/grpcurl/releases/download/v1.x.y/grpcurl_1.x.y_linux_x86_64.tar.gz
tar -xzf grpcurl_1.x.y_linux_x86_64.tar.gz
mv grpcurl /usr/local/bin/

https://github.com/fullstorydev/grpcurl/releases/download/v1.9.2/grpcurl_1.9.2_linux_x86_64.tar.gz


# Use Alpine Linux as the base image
FROM alpine:latest

# Install grpcurl
RUN apk add --no-cache \
      curl \
      bash \
      git \
      build-base \
      protoc \
      protobuf-dev \
      && curl -LO https://github.com/fullstorydev/grpcurl/releases/download/v1.8.8/grpcurl_1.8.8_linux_x86_64.tar.gz \
      && tar -xvf grpcurl_1.8.8_linux_x86_64.tar.gz grpcurl \
      && mv grpcurl /usr/local/bin/ \
      && chmod +x /usr/local/bin/grpcurl \
      && rm grpcurl_1.8.8_linux_x86_64.tar.gz

# Verify installation
RUN grpcurl --version

# Default command
CMD ["grpcurl"]

# Base image
FROM alpine:3.15

# Install necessary packages for grpcurl
RUN apk add --no-cache \
      curl \
      libc6-compat \
      && curl -LO https://github.com/fullstorydev/grpcurl/releases/download/v1.8.8/grpcurl_1.8.8_linux_x86_64.tar.gz \
      && tar -xvf grpcurl_1.8.8_linux_x86_64.tar.gz grpcurl \
      && mv grpcurl /usr/local/bin/ \
      && chmod +x /usr/local/bin/grpcurl \
      && rm grpcurl_1.8.8_linux_x86_64.tar.gz

# Verify installation
RUN grpcurl --version

CMD ["grpcurl"]

RUN ls -l /usr/local/bin/grpcurl \
    && grpcurl --version

FROM alpine:3.7
ADD https://curl.haxx.se/ca/cacert.pem /etc/ssl/certs/ca-certificates.crt
RUN apk add --no-cache curl
COPY --from=builder /go/bin/grpcurl /

# Use Alpine 3.15 as the base image
FROM alpine:3.15


      libc6-compat \
      ca-certificates \
      libressl \
      && update-ca-certificates \


# Install glibc
RUN wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \
    && wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.35-r0/glibc-2.35-r0.apk \
    && apk add glibc-2.35-r0.apk \
    && rm -f glibc-2.35-r0.apk


RUN wget -q -O glibc-2.35-r0.tar.gz https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.35-r0/glibc-2.35-r0.tar.gz \
    && tar -xvf glibc-2.35-r0.tar.gz -C /usr/ \
    && rm glibc-2.35-r0.tar.gz


COPY sgerrand.rsa.pub /etc/apk/keys/
COPY glibc-2.35-r0.apk .

# Install glibc
RUN apk add glibc-2.35-r0.apk && rm glibc-2.35-r0.apk


# Install required packages
RUN apk add --no-cache git

# Clone the grpc-go repository
RUN git clone https://github.com/grpc/grpc-go.git

# Build and install grpcurl
WORKDIR grpc-go
RUN GO111MODULE=on go install google.golang.org/grpc/cmd/grpcurl@latest

# Clean up
WORKDIR /
RUN rm -rf grpc-go

# Set the working directory
WORKDIR /app

# Copy your application files here
COPY . .

# Expose the port your application listens on
EXPOSE 8080

# Command to run your application
CMD ["grpcurl", "-help"]

builtin:kubernetes.container.restarts:filter(eq(kubernetes.cluster.name, "your-cluster-name")):filter(eq(kubernetes.namespace.name, "your-namespace")):splitBy()


# Use a base image
FROM ubuntu:latest

# Set the home directory environment variable
ENV HOME /home

# Copy a folder from your local directory to the container's home directory
COPY my_folder/ $HOME/my_folder/

# Set the working directory (optional, to operate in home)
WORKDIR $HOME

# Default command (optional)
CMD [ "ls", "-la", "$HOME/my_folder" ]




# Variables
variable "region" {
  description = "AWS region for the resources"
  type        = string
  default     = "us-east-1"
}

variable "vpc_cidr" {
  description = "CIDR block for the VPC"
  type        = string
  default     = "10.0.0.0/16"
}

variable "subnet_cidrs" {
  description = "List of CIDR blocks for subnets"
  type        = list(string)
  default     = ["10.0.1.0/24", "10.0.2.0/24"]
}

variable "availability_zones" {
  description = "List of availability zones"
  type        = list(string)
  default     = ["us-east-1a", "us-east-1b"]
}

variable "db_instance_class" {
  description = "Instance class for the RDS instance"
  type        = string
  default     = "db.t3.medium"
}

variable "db_engine" {
  description = "Database engine"
  type        = string
  default     = "postgres"
}

variable "db_engine_version" {
  description = "Database engine version"
  type        = string
  default     = "14.4"
}

variable "db_name" {
  description = "Name of the database"
  type        = string
  default     = "exampledb"
}

variable "db_username" {
  description = "Database username"
  type        = string
  default     = "admin"
}

variable "db_password" {
  description = "Database password"
  type        = string
  sensitive   = true
}

variable "environment" {
  description = "Environment tag for resources"
  type        = string
  default     = "production"
}

# Provider
provider "aws" {
  region = var.region
}

# VPC
resource "aws_vpc" "rds_vpc" {
  cidr_block           = var.vpc_cidr
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = "rds-vpc"
  }
}

# Subnets
resource "aws_subnet" "rds_subnet_1" {
  vpc_id            = aws_vpc.rds_vpc.id
  cidr_block        = var.subnet_cidrs[0]
  availability_zone = var.availability_zones[0]
  tags = {
    Name = "rds-subnet-1"
  }
}

resource "aws_subnet" "rds_subnet_2" {
  vpc_id            = aws_vpc.rds_vpc.id
  cidr_block        = var.subnet_cidrs[1]
  availability_zone = var.availability_zones[1]
  tags = {
    Name = "rds-subnet-2"
  }
}

# Subnet Group
resource "aws_db_subnet_group" "rds_subnet_group" {
  name       = "rds-subnet-group"
  subnet_ids = [aws_subnet.rds_subnet_1.id, aws_subnet.rds_subnet_2.id]
  tags = {
    Name = "rds-subnet-group"
  }
}

# Security Group
resource "aws_security_group" "rds_sg" {
  name   = "rds-security-group"
  vpc_id = aws_vpc.rds_vpc.id

  ingress {
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Replace with your IP range for better security
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "rds-security-group"
  }
}

# RDS Instance
resource "aws_db_instance" "postgres" {
  allocated_storage      = 20
  max_allocated_storage  = 100
  engine                 = var.db_engine
  engine_version         = var.db_engine_version
  instance_class         = var.db_instance_class
  name                   = var.db_name
  username               = var.db_username
  password               = var.db_password
  parameter_group_name   = "default.postgres14"
  publicly_accessible    = false
  vpc_security_group_ids = [aws_security_group.rds_sg.id]
  db_subnet_group_name   = aws_db_subnet_group.rds_subnet_group.name
  storage_encrypted      = true
  skip_final_snapshot    = true

  tags = {
    Name        = "rds-postgresql"
    Environment = var.environment
  }
}

# Outputs
output "db_instance_endpoint" {
  description = "RDS instance endpoint"
  value       = aws_db_instance.postgres.endpoint
}

output "db_instance_arn" {
  description = "RDS instance ARN"
  value       = aws_db_instance.postgres.arn
}

enabled_cloudwatch_logs_exports = ["postgresql", "upgrade", "error"]
